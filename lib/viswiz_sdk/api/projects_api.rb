=begin
#VisWiz.io API Documentation

#This SDK allows you to query and create new projects, builds or images within the VisWiz service. 

OpenAPI spec version: 1.1.0
Contact: support@viswiz.io
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0-SNAPSHOT

=end

require 'uri'

module ViswizSdk
  class ProjectsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a project
    # Create a new project for the account. 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Project]
    def create_project(body, opts = {})
      data, _status_code, _headers = create_project_with_http_info(body, opts)
      data
    end

    # Create a project
    # Create a new project for the account. 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Project, Fixnum, Hash)>] Project data, response status code and response headers
    def create_project_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.create_project ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ProjectsApi.create_project"
      end
      # resource path
      local_var_path = '/projects'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Project')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#create_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get notifications settings
    # Get the notifications settings for a project. 
    # @param project_id The requested project ID
    # @param [Hash] opts the optional parameters
    # @return [Notifications]
    def get_project_notifications(project_id, opts = {})
      data, _status_code, _headers = get_project_notifications_with_http_info(project_id, opts)
      data
    end

    # Get notifications settings
    # Get the notifications settings for a project. 
    # @param project_id The requested project ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Notifications, Fixnum, Hash)>] Notifications data, response status code and response headers
    def get_project_notifications_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.get_project_notifications ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.get_project_notifications"
      end
      # resource path
      local_var_path = '/projects/{projectID}/notifications'.sub('{' + 'projectID' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Notifications')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#get_project_notifications\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all projects
    # Get a list of all the projects for the account. 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2002]
    def get_projects(opts = {})
      data, _status_code, _headers = get_projects_with_http_info(opts)
      data
    end

    # Get all projects
    # Get a list of all the projects for the account. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2002, Fixnum, Hash)>] InlineResponse2002 data, response status code and response headers
    def get_projects_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.get_projects ...'
      end
      # resource path
      local_var_path = '/projects'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2002')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#get_projects\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update notifications settings
    # Update the notifications settings for a project. All fields are optional. 
    # @param project_id The requested project ID
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Notifications]
    def update_project_notifications(project_id, body, opts = {})
      data, _status_code, _headers = update_project_notifications_with_http_info(project_id, body, opts)
      data
    end

    # Update notifications settings
    # Update the notifications settings for a project. All fields are optional. 
    # @param project_id The requested project ID
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Notifications, Fixnum, Hash)>] Notifications data, response status code and response headers
    def update_project_notifications_with_http_info(project_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.update_project_notifications ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.update_project_notifications"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ProjectsApi.update_project_notifications"
      end
      # resource path
      local_var_path = '/projects/{projectID}/notifications'.sub('{' + 'projectID' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Notifications')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#update_project_notifications\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
